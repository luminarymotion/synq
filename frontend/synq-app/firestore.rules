rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // User profiles
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
      
      // Friends subcollection
      match /friends/{friendId} {
        allow read, write: if isOwner(userId);
      }
    }

    // Counters collection - allow authenticated users to read and write
    match /counters/{counterId} {
      allow read, write: if isAuthenticated();
    }

    // Rides collection
    match /rides/{rideId} {
      allow read: if isAuthenticated() && (
        resource.data.driver.uid == request.auth.uid ||
        request.auth.uid in resource.data.passengerUids
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.driver.uid == request.auth.uid ||
        request.auth.uid in resource.data.passengerUids
      );
      allow delete: if isAuthenticated() && resource.data.driver.uid == request.auth.uid;
    }

    // Ride invitations
    match /rideInvitations/{invitationId} {
      allow read: if isAuthenticated() && (
        resource.data.inviterId == request.auth.uid ||
        resource.data.inviteeId == request.auth.uid
      );
      allow create: if isAuthenticated() && request.resource.data.inviterId == request.auth.uid;
      allow update, delete: if isAuthenticated() && (
        resource.data.inviterId == request.auth.uid ||
        resource.data.inviteeId == request.auth.uid
      );
    }

    // Notifications
    match /notifications/{notificationId} {
      allow read, write: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Friend requests
    match /friendRequests/{requestId} {
      allow read: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid ||
        resource.data.receiverId == request.auth.uid
      );
      allow create: if isAuthenticated() && request.resource.data.senderId == request.auth.uid;
      allow update: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid ||
        resource.data.receiverId == request.auth.uid
      );
    }

    // Messages
    match /messages/{messageId} {
      allow read, write: if isAuthenticated();
    }
  }
}