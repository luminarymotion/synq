import { parsePhoneNumber } from 'libphonenumber-js';

// Major US carrier gateways
const CARRIER_GATEWAYS = {
  'verizon': '@vtext.com',
  'att': '@txt.att.net',
  'tmobile': '@tmomail.net'
};

// Carrier detection based on area code and prefix
const CARRIER_PREFIXES = {
  'verizon': ['201', '202', '203', '205', '206', '207', '208', '209', '210', '212', '213', '214', '215', '216', '217', '218', '219', '220', '223', '224', '225', '228', '229', '231', '234', '239', '240', '248', '251', '252', '253', '254', '256', '260', '262', '267', '269', '270', '272', '276', '281', '301', '302', '303', '304', '305', '307', '308', '309', '310', '312', '313', '314', '315', '316', '317', '318', '319', '320', '321', '323', '325', '330', '331', '334', '336', '337', '339', '340', '341', '347', '351', '352', '360', '361', '364', '380', '385', '386', '401', '402', '404', '405', '406', '407', '408', '409', '410', '412', '413', '414', '415', '417', '419', '423', '424', '425', '430', '432', '434', '435', '440', '442', '443', '445', '447', '458', '463', '469', '470', '475', '478', '479', '480', '484', '501', '502', '503', '504', '505', '507', '508', '509', '510', '512', '513', '515', '516', '517', '518', '520', '530', '539', '540', '541', '551', '559', '561', '562', '563', '567', '570', '571', '573', '574', '575', '580', '585', '586', '601', '602', '603', '605', '606', '607', '608', '609', '610', '612', '614', '615', '616', '617', '618', '619', '620', '623', '626', '628', '629', '630', '631', '636', '641', '646', '650', '651', '657', '660', '661', '662', '667', '669', '678', '681', '682', '701', '702', '703', '704', '706', '707', '708', '712', '713', '714', '715', '716', '717', '718', '719', '720', '724', '725', '727', '731', '732', '734', '737', '740', '747', '754', '757', '760', '762', '763', '765', '769', '770', '772', '773', '774', '775', '779', '781', '785', '786', '801', '802', '803', '804', '805', '806', '808', '810', '812', '813', '814', '815', '816', '817', '818', '828', '830', '831', '832', '843', '845', '847', '848', '850', '854', '856', '857', '858', '859', '860', '862', '863', '864', '865', '870', '872', '878', '901', '903', '904', '906', '907', '908', '909', '910', '912', '913', '914', '915', '916', '917', '918', '919', '920', '925', '928', '929', '930', '931', '934', '936', '937', '938', '940', '941', '947', '949', '951', '952', '954', '956', '959', '970', '971', '972', '973', '975', '978', '979', '980', '984', '985', '989'],
  'att': ['205', '206', '207', '208', '209', '210', '212', '213', '214', '215', '216', '217', '218', '219', '220', '223', '224', '225', '228', '229', '231', '234', '239', '240', '248', '251', '252', '253', '254', '256', '260', '262', '267', '269', '270', '272', '276', '281', '301', '302', '303', '304', '305', '307', '308', '309', '310', '312', '313', '314', '315', '316', '317', '318', '319', '320', '321', '323', '325', '330', '331', '334', '336', '337', '339', '340', '341', '347', '351', '352', '360', '361', '364', '380', '385', '386', '401', '402', '404', '405', '406', '407', '408', '409', '410', '412', '413', '414', '415', '417', '419', '423', '424', '425', '430', '432', '434', '435', '440', '442', '443', '445', '447', '458', '463', '469', '470', '475', '478', '479', '480', '484', '501', '502', '503', '504', '505', '507', '508', '509', '510', '512', '513', '515', '516', '517', '518', '520', '530', '539', '540', '541', '551', '559', '561', '562', '563', '567', '570', '571', '573', '574', '575', '580', '585', '586', '601', '602', '603', '605', '606', '607', '608', '609', '610', '612', '614', '615', '616', '617', '618', '619', '620', '623', '626', '628', '629', '630', '631', '636', '641', '646', '650', '651', '657', '660', '661', '662', '667', '669', '678', '681', '682', '701', '702', '703', '704', '706', '707', '708', '712', '713', '714', '715', '716', '717', '718', '719', '720', '724', '725', '727', '731', '732', '734', '737', '740', '747', '754', '757', '760', '762', '763', '765', '769', '770', '772', '773', '774', '775', '779', '781', '785', '786', '801', '802', '803', '804', '805', '806', '808', '810', '812', '813', '814', '815', '816', '817', '818', '828', '830', '831', '832', '843', '845', '847', '848', '850', '854', '856', '857', '858', '859', '860', '862', '863', '864', '865', '870', '872', '878', '901', '903', '904', '906', '907', '908', '909', '910', '912', '913', '914', '915', '916', '917', '918', '919', '920', '925', '928', '929', '930', '931', '934', '936', '937', '938', '940', '941', '947', '949', '951', '952', '954', '956', '959', '970', '971', '972', '973', '975', '978', '979', '980', '984', '985', '989'],
  'tmobile': ['201', '202', '203', '205', '206', '207', '208', '209', '210', '212', '213', '214', '215', '216', '217', '218', '219', '220', '223', '224', '225', '228', '229', '231', '234', '239', '240', '248', '251', '252', '253', '254', '256', '260', '262', '267', '269', '270', '272', '276', '281', '301', '302', '303', '304', '305', '307', '308', '309', '310', '312', '313', '314', '315', '316', '317', '318', '319', '320', '321', '323', '325', '330', '331', '334', '336', '337', '339', '340', '341', '347', '351', '352', '360', '361', '364', '380', '385', '386', '401', '402', '404', '405', '406', '407', '408', '409', '410', '412', '413', '414', '415', '417', '419', '423', '424', '425', '430', '432', '434', '435', '440', '442', '443', '445', '447', '458', '463', '469', '470', '475', '478', '479', '480', '484', '501', '502', '503', '504', '505', '507', '508', '509', '510', '512', '513', '515', '516', '517', '518', '520', '530', '539', '540', '541', '551', '559', '561', '562', '563', '567', '570', '571', '573', '574', '575', '580', '585', '586', '601', '602', '603', '605', '606', '607', '608', '609', '610', '612', '614', '615', '616', '617', '618', '619', '620', '623', '626', '628', '629', '630', '631', '636', '641', '646', '650', '651', '657', '660', '661', '662', '667', '669', '678', '681', '682', '701', '702', '703', '704', '706', '707', '708', '712', '713', '714', '715', '716', '717', '718', '719', '720', '724', '725', '727', '731', '732', '734', '737', '740', '747', '754', '757', '760', '762', '763', '765', '769', '770', '772', '773', '774', '775', '779', '781', '785', '786', '801', '802', '803', '804', '805', '806', '808', '810', '812', '813', '814', '815', '816', '817', '818', '828', '830', '831', '832', '843', '845', '847', '848', '850', '854', '856', '857', '858', '859', '860', '862', '863', '864', '865', '870', '872', '878', '901', '903', '904', '906', '907', '908', '909', '910', '912', '913', '914', '915', '916', '917', '918', '919', '920', '925', '928', '929', '930', '931', '934', '936', '937', '938', '940', '941', '947', '949', '951', '952', '954', '956', '959', '970', '971', '972', '973', '975', '978', '979', '980', '984', '985', '989']
};

class PhoneNotificationService {
  constructor() {
    this.carrierCache = new Map(); // Cache for carrier detection
  }

  // Format phone number to E.164 format (e.g., +12125551234)
  formatPhoneNumber(phoneNumber) {
    try {
      const parsed = parsePhoneNumber(phoneNumber, 'US');
      if (!parsed) return null;
      return parsed.format('E.164');
    } catch (error) {
      console.error('Error formatting phone number:', error);
      return null;
    }
  }

  // Detect carrier based on area code and prefix
  detectCarrier(phoneNumber) {
    try {
      const parsed = parsePhoneNumber(phoneNumber, 'US');
      if (!parsed) return null;

      const areaCode = parsed.nationalNumber.substring(0, 3);
      
      // Check cache first
      if (this.carrierCache.has(areaCode)) {
        return this.carrierCache.get(areaCode);
      }

      // Check each carrier's prefixes
      for (const [carrier, prefixes] of Object.entries(CARRIER_PREFIXES)) {
        if (prefixes.includes(areaCode)) {
          this.carrierCache.set(areaCode, carrier);
          return carrier;
        }
      }

      // If no carrier detected, default to Verizon (most common)
      this.carrierCache.set(areaCode, 'verizon');
      return 'verizon';
    } catch (error) {
      console.error('Error detecting carrier:', error);
      return 'verizon'; // Default to Verizon on error
    }
  }

  // Get SMS gateway for a phone number
  getSmsGateway(phoneNumber) {
    const formattedNumber = this.formatPhoneNumber(phoneNumber);
    if (!formattedNumber) return null;

    const carrier = this.detectCarrier(phoneNumber);
    if (!carrier || !CARRIER_GATEWAYS[carrier]) return null;

    // Remove the '+' and country code, then add the gateway
    const nationalNumber = formattedNumber.substring(2); // Remove '+1'
    return `${nationalNumber}${CARRIER_GATEWAYS[carrier]}`;
  }

  // Send SMS via email gateway
  async sendSms(phoneNumber, message) {
    try {
      const gateway = this.getSmsGateway(phoneNumber);
      if (!gateway) {
        throw new Error('Invalid phone number or carrier not supported');
      }

      // Here you would use your email service to send the message
      // For example, using Firebase Cloud Functions or your backend service
      const emailData = {
        to: gateway,
        subject: '', // SMS messages don't need subjects
        text: message,
        // You might want to add a from address that users can reply to
        from: 'noreply@synqroute.com'
      };

      // TODO: Implement email sending
      // This would be handled by your backend service
      console.log('Sending SMS via email gateway:', emailData);
      
      return { success: true, gateway };
    } catch (error) {
      console.error('Error sending SMS:', error);
      return { success: false, error: error.message };
    }
  }
}

export default new PhoneNotificationService(); 