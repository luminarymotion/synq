rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidProfileData() {
      let profile = request.resource.data.profile;
      return profile != null &&
             profile.email is string &&
             (profile.displayName == null || profile.displayName is string) &&
             (profile.phoneNumber == null || profile.phoneNumber is string) &&
             (profile.photoURL == null || profile.photoURL is string) &&
             (profile.bio == null || profile.bio is string) &&
             (profile.location == null || profile.location is map) &&
             (profile.social == null || profile.social is map);
    }

    // User profiles
    match /users/{userId} {
      // Allow read if authenticated
      allow read: if isAuthenticated();
      
      // Allow create if:
      // 1. User is authenticated
      // 2. Document ID matches user's UID
      // 3. Data is valid
      allow create: if isOwner(userId) && isValidProfileData();
      
      // Allow update if:
      // 1. User is authenticated
      // 2. Document ID matches user's UID
      // 3. Data is valid
      allow update: if isOwner(userId) && isValidProfileData();
      
      // Friends subcollection
      match /friends/{friendId} {
        allow read, write: if isOwner(userId);
      }
    }

    // Friend Requests
    match /friendRequests/{requestId} {
      // Allow read if user is either sender or receiver
      allow read: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid ||
        resource.data.receiverId == request.auth.uid
      );
      
      // Allow create if user is the sender and not sending to themselves
      allow create: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid &&
        request.resource.data.receiverId != request.auth.uid &&
        request.resource.data.status == 'pending' &&
        request.resource.data.metadata.createdAt is timestamp &&
        request.resource.data.metadata.updatedAt is timestamp;
      
      // Allow update if user is the receiver and only updating status
      allow update: if isAuthenticated() && 
        resource.data.receiverId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'metadata.updatedAt']) &&
        request.resource.data.status in ['accepted', 'rejected', 'pending'];
      
      // Allow delete if user is either sender or receiver
      allow delete: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid ||
        resource.data.receiverId == request.auth.uid
      );
    }

    // Relationships (Friendships)
    match /relationships/{relationshipId} {
      // Allow read if user is part of the relationship
      allow read: if isAuthenticated() && (
        // Allow reading if user is in the users array
        request.auth.uid in resource.data.users ||
        // Allow querying relationships where user is a member
        (request.query != null && 
         request.query.filters.size() > 0 && 
         request.query.filters[0].op == 'array-contains' && 
         request.query.filters[0].path == 'users' && 
         request.query.filters[0].value == request.auth.uid)
      );
      
      // Allow create if user is part of the users array
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.users;
      
      // Allow update if user is part of the relationship
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.users;
      
      // Allow delete if user is part of the relationship
      allow delete: if isAuthenticated() && 
        request.auth.uid in resource.data.users;
    }

    // Counters collection
    match /counters/{counterId} {
      allow read, write: if isAuthenticated();
    }

    // Rides collection
    match /rides/{rideId} {
      // Allow reading if user is driver or passenger
      allow read: if isAuthenticated() && (
        resource.data.driver.uid == request.auth.uid ||
        request.auth.uid in resource.data.passengerUids
      );
      
      // Allow creating new rides
      allow create: if isAuthenticated() && 
        request.resource.data.driver.uid == request.auth.uid;
      
      // Allow updating if user is driver or passenger
      allow update: if isAuthenticated() && (
        resource.data.driver.uid == request.auth.uid ||
        request.auth.uid in resource.data.passengerUids
      );
      
      // Allow deleting if user is driver
      allow delete: if isAuthenticated() && 
        resource.data.driver.uid == request.auth.uid;
    }

    // Ride invitations
    match /rideInvitations/{invitationId} {
      allow read: if isAuthenticated() && (
        resource.data.inviterId == request.auth.uid ||
        resource.data.inviteeId == request.auth.uid
      );
      allow create: if isAuthenticated() && request.resource.data.inviterId == request.auth.uid;
      allow update, delete: if isAuthenticated() && (
        resource.data.inviterId == request.auth.uid ||
        resource.data.inviteeId == request.auth.uid
      );
    }

    // Notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId is string;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['read', 'readAt']);
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
  }
} 