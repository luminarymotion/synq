rules_version = '3';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid.trim() == userId.trim();
    }

    function isValidProfileData() {
      let profile = request.resource.data.profile;
      return profile != null &&
             profile.email is string &&
             (profile.displayName == null || profile.displayName is string) &&
             (profile.phoneNumber == null || profile.phoneNumber is string) &&
             (profile.photoURL == null || profile.photoURL is string) &&
             (profile.bio == null || profile.bio is string) &&
             (profile.location == null || profile.location is map) &&
             (profile.social == null || profile.social is map);
    }

    // User profiles
    match /users/{userId} {
      // Allow read if authenticated
      allow read: if isAuthenticated();
      
      // Allow create if:
      // 1. User is authenticated
      // 2. Document ID matches user's UID
      // 3. Data is valid
      allow create: if isOwner(userId) && isValidProfileData();
      
      // Allow update if:
      // 1. User is authenticated
      // 2. Document ID matches user's UID
      // 3. Data is valid
      allow update: if isOwner(userId) && isValidProfileData();
      
      // Friends subcollection
      match /friends/{friendId} {
        allow read, write: if isOwner(userId);
      }
    }

    // Friend Requests
    match /friendRequests/{requestId} {
      // Basic validation function
      function isValidFriendRequest() {
        let data = request.resource.data;
        
        // Log everything for debugging
        debug('=== Friend Request Validation START ===');
        debug('Request Method:', request.method);
        debug('Auth UID (raw):', request.auth.uid);
        debug('Auth UID (trimmed):', request.auth.uid.trim());
        debug('Data Sender ID (raw):', data.senderId);
        debug('Data Sender ID (trimmed):', data.senderId.trim());
        debug('Auth Email:', request.auth.token.email);
        debug('Data Receiver ID:', data.receiverId);
        debug('Data Message:', data.message);
        
        // Check each condition separately
        let isAuthenticated = request.auth != null;
        let senderMatchesAuth = data.senderId.trim() == request.auth.uid.trim();
        let hasValidFields = data.senderId is string && 
                           data.receiverId is string && 
                           data.message is string;
        
        debug('Validation Checks:', {
          isAuthenticated: isAuthenticated,
          senderMatchesAuth: senderMatchesAuth,
          hasValidFields: hasValidFields,
          senderIdType: typeof data.senderId,
          receiverIdType: typeof data.receiverId,
          messageType: typeof data.message,
          uidComparison: {
            authUid: request.auth.uid.trim(),
            senderId: data.senderId.trim(),
            areEqual: data.senderId.trim() == request.auth.uid.trim()
          }
        });
        
        let isValid = isAuthenticated && senderMatchesAuth && hasValidFields;
        
        debug('Final Validation Result:', {
          isValid: isValid,
          failedChecks: {
            isAuthenticated: !isAuthenticated,
            senderMatchesAuth: !senderMatchesAuth,
            hasValidFields: !hasValidFields
          }
        });
        
        debug('=== Friend Request Validation END ===');
        return isValid;
      }

      // Allow read if user is either sender or receiver
      allow read: if isAuthenticated() && (
        resource.data.senderId.trim() == request.auth.uid.trim() ||
        resource.data.receiverId.trim() == request.auth.uid.trim()
      );
      
      // Allow create with basic validation
      allow create: if isValidFriendRequest();
      
      // Allow update if user is the receiver
      allow update: if isAuthenticated() && 
        resource.data.receiverId.trim() == request.auth.uid.trim();
      
      // Allow delete if user is either sender or receiver
      allow delete: if isAuthenticated() && (
        resource.data.senderId.trim() == request.auth.uid.trim() ||
        resource.data.receiverId.trim() == request.auth.uid.trim()
      );
    }

    // Relationships
    match /relationships/{relationshipId} {
      // Allow read if user is part of the relationship
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.users;
      
      // Allow create if user is part of the relationship
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.users;
      
      // Allow update if user is part of the relationship
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.users;
      
      // Allow delete if user is part of the relationship
      allow delete: if isAuthenticated() && 
        request.auth.uid in resource.data.users;
    }

    // Counters collection
    match /counters/{counterId} {
      allow read, write: if isAuthenticated();
    }

    // Rides collection
    match /rides/{rideId} {
      // Allow reading if user is driver or passenger
      allow read: if isAuthenticated() && (
        resource.data.driver.uid == request.auth.uid ||
        request.auth.uid in resource.data.passengerUids
      );
      
      // Allow creating new rides
      allow create: if isAuthenticated() && 
        request.resource.data.driver.uid == request.auth.uid;
      
      // Allow updating if user is driver or passenger
      allow update: if isAuthenticated() && (
        resource.data.driver.uid == request.auth.uid ||
        request.auth.uid in resource.data.passengerUids
      );
      
      // Allow deleting if user is driver
      allow delete: if isAuthenticated() && 
        resource.data.driver.uid == request.auth.uid;
    }

    // Ride invitations
    match /rideInvitations/{invitationId} {
      allow read: if isAuthenticated() && (
        resource.data.inviterId == request.auth.uid ||
        resource.data.inviteeId == request.auth.uid
      );
      allow create: if isAuthenticated() && request.resource.data.inviterId == request.auth.uid;
      allow update, delete: if isAuthenticated() && (
        resource.data.inviterId == request.auth.uid ||
        resource.data.inviteeId == request.auth.uid
      );
    }

    // Notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && (
        // Allow creating notifications for yourself
        request.resource.data.userId == request.auth.uid ||
        // Allow creating friend request notifications
        (request.resource.data.type in ['friend_request', 'friend_request_accepted', 'friend_request_rejected', 'friend_added'] &&
         (
           // For friend requests, sender can create notification for receiver
           (request.resource.data.type == 'friend_request' && 
            request.resource.data.data.senderId == request.auth.uid) ||
           // For friend request responses, receiver can create notification for sender
           (request.resource.data.type in ['friend_request_accepted', 'friend_request_rejected'] && 
            request.resource.data.data.receiverId == request.auth.uid) ||
           // For friend added, either user can create notification
           (request.resource.data.type == 'friend_added' && 
            (request.resource.data.data.senderId == request.auth.uid || 
             request.resource.data.data.receiverId == request.auth.uid))
         ))
      );
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Recent Rides
    match /recentRides/{rideId} {
      allow read: if isAuthenticated() && (
        resource.data.creatorId == request.auth.uid ||
        request.auth.uid in resource.data.participants
      );
    }
  }
} 